{"version":3,"sources":["App.module.scss","components/target-card/target-card.module.scss","components/plum-column/plum-column.module.scss","components/plums/plums.module.scss","components/plum-row/plpum-row.module.scss","components/plum/plum.module.scss","components/plum/plum.component.interface.ts","components/plum/plum.component.tsx","components/plum-column/plum-column.component.tsx","services/plum-creator/plum-creator.service.ts","components/plum-row/plum-row.component.interface.ts","components/plum-target/plum-target.component.interface.ts","components/plum-row/plum-row.component.tsx","components/plums/plums.component.tsx","services/plum-state-compare/plum-state-compare.service.ts","components/target-card/target-card.component.tsx","components/plum-target/plum-target.component.tsx","App.tsx","services/winning-state/winning.state.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","PlumColors","Plum","props","color","plum","onDragStart","isDraggable","onDragOver","e","stopPropagation","preventDefault","draggable","onDrag","bind","className","style","PlumColumn","column","onColumnDrop","noOpEvent","container","onDrop","onDragEnd","onDragEnter","onDragLeave","map","index","id","columnLine","PlumCreator","x","y","sameLengthColumns","matrix","Array","from","length","availableColors","Tertiary","Primary","Secondary","Quaternary","availableColorsMap","reduce","acum","total","indexForItem","indexUntilViable","getRandUpToN","push","pickAColor","n","Math","ceil","random","max","randomIndex","colors","availability","choice","Axis","TargetViewState","PlumRow","row","onRowDrop","avoidDefault","styles","rowLine","Plums","useState","columns","setColumn","rows","setRow","movingFrom","setMovingFrom","winningState","onWin","movingIndex","Infinity","columnToRow","columnIndex","currentColumn","relevantColumn","currentRow","firstOfColumn","splice","rowToColumn","relevantRow","currentColumns","content","pop","unshift","rowToRow","rowIndex","moved","onMatrixMovementStrategy","target","Row","Column","i","useEffect","state2","every","item","join","headContainer","columnsContainer","plums","TargetCard","onClick","textHelp","combinationContainer","dotColumn","dot","PlumTarget","Button","viewState","setViewState","type","button","Solution","App","useWinningState","setWinningState","isWin","setIsWin","appContainer","header","buttonContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b778d87.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"App_appContainer__1hNk1\",\"header\":\"App_header__2L3DO\",\"button\":\"App_button__z3Rot\",\"buttonContainer\":\"App_buttonContainer__1xV-k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"target-card_container__3Gt56\",\"dotColumn\":\"target-card_dotColumn__3v-FA\",\"combinationContainer\":\"target-card_combinationContainer__3jdEh\",\"textHelp\":\"target-card_textHelp__2DyUS\",\"dot\":\"target-card_dot__2a1D8\",\"Primary\":\"target-card_Primary__2MvIk\",\"Secondary\":\"target-card_Secondary__3iwgJ\",\"Tertiary\":\"target-card_Tertiary__3s6Kd\",\"Quaternary\":\"target-card_Quaternary__2mP2N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"plum-column_container__3tPpG\",\"columnLine\":\"plum-column_columnLine__1JSK3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"columnsContainer\":\"plums_columnsContainer__PQ5c-\",\"headContainer\":\"plums_headContainer__2xGdk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"plpum-row_row__6xbUM\",\"rowLine\":\"plpum-row_rowLine__1yajV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dot\":\"plum_dot__1CpJf\",\"Primary\":\"plum_Primary__3Ssb9\",\"Secondary\":\"plum_Secondary__3iTv9\",\"Tertiary\":\"plum_Tertiary__3BLBx\",\"Quaternary\":\"plum_Quaternary__1kiEt\"};","export interface IPlumProps {\n    plum: IPlum;\n    isDraggable: boolean;\n    onDragStart: () => void;\n}\n\nexport interface IPlum {\n    id: number;\n    color: PlumColors\n}\n\nexport enum PlumColors {\n    Primary = 'Primary',\n    Secondary = 'Secondary',\n    Tertiary = 'Tertiary',\n    Quaternary = 'Quaternary'\n}","import React, {DragEvent, FunctionComponent} from \"react\";\nimport {IPlumProps} from \"./plum.component.interface\";\nimport style from './plum.module.scss'\n\nexport const Plum: FunctionComponent<IPlumProps> = (props: IPlumProps) => {\n    const {color} = props.plum,\n        {onDragStart, isDraggable} = props;\n\n    function onDragOver(e: DragEvent<HTMLDivElement>) {\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    return (\n        <div draggable={isDraggable}\n             onDrag={onDragOver.bind(this)}\n             onDragOver={onDragOver.bind(this)}\n             onDragStart={(e) => {\n                 onDragStart()\n             }}\n             className={style[color]}>\n        </div>\n    )\n}","import {IPlumContainerProps} from \"./plum-column.component.interface\";\nimport {ReactElement, FunctionComponent, DragEvent} from 'react'\nimport style from './plum-column.module.scss';\nimport {Plum} from \"../plum/plum.component\";\nimport {IPlum} from \"../plum/plum.component.interface\";\n\nexport const PlumColumn: FunctionComponent<IPlumContainerProps> = (props: IPlumContainerProps): ReactElement => {\n    const {column, onColumnDrop, onDrag} = props;\n\n    function noOpEvent(e: DragEvent<HTMLDivElement>): void {\n        e.preventDefault()\n    }\n\n    return (\n        <div className={style.container}\n             onDrop={(e) => {\n                 e.preventDefault();\n                 onColumnDrop();\n             }}\n             onDragEnd={noOpEvent.bind(this)}\n             onDragEnter={noOpEvent.bind(this)}\n             onDragOver={noOpEvent.bind(this)}\n             onDragLeave={noOpEvent.bind(this)}>\n            {column.map((plum: IPlum, index: number) => {\n                return <Plum key={plum.id} isDraggable={index === 0} onDragStart={onDrag.bind(this)} plum={plum}\n                />\n            })}\n            <div className={style.columnLine}/>\n        </div>);\n}","import {IPlum, PlumColors} from \"../../components/plum/plum.component.interface\";\n\n\nexport function PlumCreator(x: number, y: number, sameLengthColumns: boolean = false): Array<Array<IPlum>> {\n    const matrix = Array.from({length: x}, (): Array<IPlum> => {\n        return [];\n    });\n\n    const availableColors: Array<PlumColors> = [PlumColors.Tertiary, PlumColors.Primary, PlumColors.Secondary, PlumColors.Quaternary];\n    const availableColorsMap: Record<PlumColors, number> = availableColors.reduce((acum: Record<PlumColors, number>, color: PlumColors): Record<PlumColors, number> => {\n        acum[color] = y;\n\n        return acum;\n    }, {} as Record<PlumColors, number>)\n\n    let total: number = x * y;\n    while (total--) {\n        const indexForItem = !sameLengthColumns ? getRandUpToN(matrix.length) : indexUntilViable(matrix, y);\n        matrix[indexForItem].push(\n            {\n                id: total,\n                color: pickAColor(availableColors, availableColorsMap)\n            })\n    }\n\n    return matrix;\n}\n\nexport function getRandUpToN(n: number): number {\n    return Math.ceil(Math.random() * 37 * 151) % n;\n}\n\nexport function indexUntilViable(matrix: Array<Array<IPlum>>, max: number): number {\n    const randomIndex = getRandUpToN(matrix.length);\n    if (matrix[randomIndex].length < max) {\n        return randomIndex;\n    } else {\n        return indexUntilViable(matrix, max)\n    }\n}\n\nexport function pickAColor(colors: Array<PlumColors>, availability: Record<PlumColors, number>): PlumColors {\n    const choice: PlumColors = colors[getRandUpToN(colors.length)];\n\n    if (availability[choice] > 0) {\n        --availability[choice];\n        return choice;\n    } else {\n        return pickAColor(colors, availability);\n    }\n}","import {IPlum} from \"../plum/plum.component.interface\";\n\nexport interface IPlumRowProps {\n    row: Array<IPlum>;\n    onRowDrop: () => void;\n    onDrag: () => void\n}\n\nexport enum Axis {\n    Row = 'row',\n    Column = 'column'\n}","import {IPlum} from \"../plum/plum.component.interface\";\n\nexport interface IPlumTargetProps {\n    target: Array<Array<IPlum>>;\n    onClick?: () => void;\n}\n\nexport enum TargetViewState {\n    Solution= 'Solution',\n    Button ='button'\n}","import {FunctionComponent, ReactElement, DragEvent} from \"react\";\nimport {IPlumRowProps} from \"./plum-row.component.interface\";\nimport {IPlum} from \"../plum/plum.component.interface\";\nimport styles from \"./plpum-row.module.scss\"\nimport {Plum} from \"../plum/plum.component\";\n\nexport const PlumRow: FunctionComponent<IPlumRowProps> = (props: IPlumRowProps): ReactElement => {\n    const {row, onRowDrop, onDrag} = props;\n\n    function avoidDefault(e: DragEvent<HTMLDivElement>) {\n        e.preventDefault();\n    }\n\n    return (\n        <div className={styles.row}\n             onDrop={(e) => {\n                 e.preventDefault();\n                 onRowDrop();\n             }}\n             onDragEnd={(e) => e.preventDefault()}\n             onDragEnter={(e) => e.preventDefault()}\n             onDragOver={avoidDefault.bind(this)}\n             onDragLeave={avoidDefault.bind(this)}>\n            {\n                row.map((plum: IPlum, index: number) => {\n                    return <Plum isDraggable={index === 0}\n                                 onDragStart={() => {\n                                     onDrag()\n                                 }}\n                                 key={plum.id}\n                                 plum={plum}/>\n                })\n            }\n            <div className={styles.rowLine} />\n        </div>\n    )\n}","import React, {useEffect, useState} from \"react\";\nimport {PlumColumn} from \"../plum-column/plum-column.component\";\nimport {PlumCreator} from \"../../services/plum-creator/plum-creator.service\";\nimport styles from \"./plums.module.scss\"\nimport {IPlum} from \"../plum/plum.component.interface\";\nimport {PlumRow} from \"../plum-row/plum-row.component\";\nimport {Axis} from \"../plum-row/plum-row.component.interface\";\nimport {IPlumsState} from \"./plums.interface\";\nimport {plumStateCompare} from \"../../services/plum-state-compare/plum-state-compare.service\";\n\nexport function Plums(props: IPlumsState) {\n    const [columns, setColumn] = useState(() => PlumCreator(4, 4));\n    const [rows, setRow] = useState(() => PlumCreator(4, 0));\n    const [movingFrom, setMovingFrom] = useState<Axis>();\n    const {winningState, onWin} = props;\n    let movingIndex: number = -Infinity;\n\n    useEffect((): void => {\n        if (plumStateCompare(winningState, columns)) {\n            onWin()\n        }\n    }, [onWin, winningState, columns]);\n\n    useEffect((): void => {\n        setColumn(PlumCreator(4, 4));\n    }, [winningState])\n\n    function columnToRow(columnIndex: number) {\n        setColumn((currentColumn: Array<Array<IPlum>>) => {\n            const relevantColumn: Array<IPlum> = currentColumn[columnIndex];\n            setRow((currentRow: Array<Array<IPlum>>) => {\n                if (currentRow[columnIndex] && currentRow[columnIndex].length === 0 && movingIndex === columnIndex) {\n                    const firstOfColumn: IPlum = relevantColumn[0];\n                    currentRow.splice(columnIndex, 1, [firstOfColumn]);\n                    relevantColumn.splice(0, 1)\n                }\n\n                return [...currentRow];\n            });\n\n            return [...currentColumn];\n        })\n    }\n\n    function rowToColumn(row: number) {\n        setRow((currentRow: Array<Array<IPlum>>) => {\n            const relevantRow = currentRow[row];\n            setColumn((currentColumns: Array<Array<IPlum>>) => {\n                const content = relevantRow.pop();\n\n                if (content) {\n                    currentColumns[row].unshift(content)\n                }\n\n\n                return [...currentColumns];\n            });\n\n            return [...currentRow];\n        })\n    }\n\n    function rowToRow(rowIndex: number): void {\n        setRow((currentRow: Array<Array<IPlum>>) => {\n            if ((((rowIndex - 1) === movingIndex) || ((rowIndex + 1) === movingIndex)) && currentRow[rowIndex].length === 0) {\n                const moved: IPlum | undefined = currentRow[movingIndex].pop();\n                if (moved) {\n                    currentRow[rowIndex].push(moved);\n                }\n            }\n\n\n            return [...currentRow]\n        });\n    }\n\n    function onMatrixMovementStrategy(index: number, target: Axis) {\n        const strategyMap: Record<Axis, Record<Axis.Row | Axis.Column, (i: number) => void>> = {\n            [Axis.Row]: {\n                [Axis.Row]: rowToRow,\n                [Axis.Column]: rowToColumn\n            },\n            [Axis.Column]: {\n                [Axis.Row]: columnToRow,\n                [Axis.Column]: (i: number) => {\n                },\n            }\n        }\n\n        strategyMap[movingFrom as Axis][target](index);\n    }\n\n    return (\n        <div>\n            <div className={styles.headContainer}>\n                {\n                    rows.map((row: Array<IPlum>, rowIndex: number) => {\n                        return <PlumRow row={row}\n                                        key={rowIndex}\n                                        onDrag={() => {\n                                            setMovingFrom(Axis.Row);\n                                            movingIndex = rowIndex;\n                                        }\n                                        }\n                                        onRowDrop={() => onMatrixMovementStrategy(rowIndex, Axis.Row)}/>\n                    })\n                }\n            </div>\n            <div className={styles.columnsContainer}>\n                {\n                    columns.map((plums: Array<IPlum>, columnIndex: number) => {\n                        return <PlumColumn\n                            onDrag={() => {\n                                setMovingFrom(Axis.Column);\n                                movingIndex = columnIndex;\n                            }}\n                            key={columnIndex}\n                            onColumnDrop={() => onMatrixMovementStrategy(columnIndex, Axis.Column)}\n                            column={plums}/>\n                    })\n                }\n            </div>\n        </div>\n    )\n}","import {IPlum} from \"../../components/plum/plum.component.interface\";\n\nexport function plumStateCompare(state1: Array<Array<IPlum>>, state2: Array<Array<IPlum>>): boolean {\n    return state1.every((item: Array<IPlum>, index: number) => {\n        return item.map((plum: IPlum) => plum.color).join('|') === state2[index].map((plum: IPlum) => plum.color).join('|')\n    })\n}","import {FunctionComponent} from \"react\";\nimport styles from './target-card.module.scss';\nimport {IPlumTargetProps} from \"../plum-target/plum-target.component.interface\";\nimport {IPlum} from \"../plum/plum.component.interface\";\n\nexport const TargetCard: FunctionComponent<IPlumTargetProps> = (props: IPlumTargetProps) => {\n    const {target, onClick} = props;\n\n    return (\n        <div onClick={onClick!.bind(this)}\n             className={styles.container}>\n            <p className={styles.textHelp}>\n                Reach the following combination to win:\n            </p>\n            <div className={styles.combinationContainer}>\n                {\n                    target.map((column: Array<IPlum>, columnIndex: number) => {\n                        return (<div className={styles.dotColumn} key={columnIndex}>\n                            {\n                                column.map((dot: IPlum) => {\n                                    return <span className={styles[dot.color]} key={dot.id}/>\n                                })\n                            }\n                        </div>)\n                    })\n                }\n            </div>\n        </div>\n    )\n}","import React, {FunctionComponent, useState} from \"react\";\nimport {IPlumTargetProps, TargetViewState} from \"./plum-target.component.interface\";\nimport styles from \"../../App.module.scss\";\nimport {TargetCard} from \"../target-card/target-card.component\";\n\nexport const PlumTarget: FunctionComponent<IPlumTargetProps> = (props: IPlumTargetProps) => {\n    const [viewState, setViewState] = useState(() => TargetViewState.Button);\n    const {target} = props;\n\n    return (viewState === TargetViewState.Button ? <button type='button'\n                                                           className={styles.button}\n                                                           onClick={() => setViewState(TargetViewState.Solution)}>how to win</button> : <TargetCard onClick={() => setViewState(TargetViewState.Button)} target={target}/>)\n}\n","import React, {useEffect, useState} from 'react';\nimport styles from './App.module.scss';\nimport {Plums} from \"./components/plums/plums.component\";\nimport {useWinningState} from \"./services/winning-state/winning.state\";\nimport {PlumCreator} from \"./services/plum-creator/plum-creator.service\";\nimport {PlumTarget} from \"./components/plum-target/plum-target.component\";\n\nfunction App() {\n    const [winningState, setWinningState] = useWinningState();\n    const [isWin, setIsWin] = useState(false);\n\n\n    return (\n        <div className={styles.appContainer}>\n            <header className={styles.header}>\n                <h1>Plums</h1>\n                <div className={styles.buttonContainer}>\n                    <PlumTarget target={winningState}/>\n                    <button type='button'\n                            onClick={() => setWinningState(PlumCreator(4, 4, true))}\n                            className={styles.button}>New Game\n                    </button>\n                </div>\n            </header>\n            {\n                isWin ? null : <Plums\n                    onWin={() => setIsWin(true)}\n                    winningState={winningState}/>\n            }\n        </div>\n\n    );\n}\n\nexport default App;\n","import {Dispatch, SetStateAction, useState} from \"react\";\nimport {PlumCreator} from \"../plum-creator/plum-creator.service\";\nimport {IPlum} from \"../../components/plum/plum.component.interface\";\n\nexport function useWinningState(): [Array<Array<IPlum>>, Dispatch<SetStateAction<Array<Array<IPlum>>>>] {\n    const [winningState, setWinningState] = useState(() => PlumCreator(4, 4, true));\n\n\n    return [winningState, setWinningState]\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}